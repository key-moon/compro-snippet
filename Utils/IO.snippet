<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>UIntReader</Title>
      <Shortcut>uireader</Shortcut>
      <Description>スペース/改行区切りの符号無しintを1ブロックだけ読み取る</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
          <![CDATA[static readonly TextReader In = Console.In;
static int NextUInt
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    get
    {    
        int res = 0;
        int next = In.Read();
        while (48 > next || next > 57) next = In.Read();
        while (48 <= next && next <= 57)
        {
            res = res * 10 + next - 48;
            next = In.Read();
        }
        return res;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>IntReader</Title>
      <Shortcut>ireader</Shortcut>
      <Description>スペース/改行区切りの符号ありintを1ブロックだけ読み取る</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[static readonly TextReader In = Console.In;
static int NextInt
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    get
    {
        int res = 0;
        int next = In.Read();
        int rev = 1;
        while (45 > next || next > 57) next = In.Read();
        if (next == 45) { next = In.Read(); rev = -1; }
        while (48 <= next && next <= 57)
        {
            res = res * 10 + next - 48;
            next = In.Read();
        }
        return res * rev;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ULongReader</Title>
      <Shortcut>ulreader</Shortcut>
      <Description>スペース/改行区切りの符号無しlongを1ブロックだけ読み取る</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[static readonly TextReader In = Console.In;
static long NextULong
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    get
    {    
        long res = 0;
        int next = In.Read();
        while (48 > next || next > 57) next = In.Read();
        while (48 <= next && next <= 57)
        {
            res = res * 10 + next - 48;
            next = In.Read();
        }
        return res;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>LongReader</Title>
      <Shortcut>lreader</Shortcut>
      <Description>スペース/改行区切りの符号ありlongを1ブロックだけ読み取る</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[static readonly TextReader In = Console.In;
static int NextLong
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    get
    {
        long res = 0;
        int next = In.Read();
        int rev = 1;
        while (45 > next || next > 57) next = In.Read();
        if (next == 45) { next = In.Read(); rev = -1; }
        while (48 <= next && next <= 57)
        {
            res = res * 10 + next - 48;
            next = In.Read();
        }
        return res * rev;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>CharReader</Title>
      <Shortcut>creader</Shortcut>
      <Description>スペース/改行を除いた次のcharを1文字だけ読み取る</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions</Namespace>
        </Import>
        <Import>
          <Namespace>MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[static readonly TextReader In = Console.In;
static char NextChar
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    get
    {
        int next = In.Read();
        while (next <= 32) next = In.Read();
        return (char)next;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>