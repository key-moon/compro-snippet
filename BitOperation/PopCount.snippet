<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>PopCount(Long)</Title>
      <Shortcut>popcountl</Shortcut>
      <Description>符号付きlongのbitが立っている数</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Runtime.CompilerServices</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static byte PopCount(long n)
{
    unchecked
    {
        int msb = 0;
        if (n < 0)
        {
            n = -(n + 1);
            msb = 1;
        }
        n = (n & 0x5555555555555555L) + ((n >> 1) & 0x5555555555555555L);
        n = (n & 0x3333333333333333L) + ((n >> 2) & 0x3333333333333333L);
        n = (n & 0x0f0f0f0f0f0f0f0fL) + ((n >> 4) & 0x0f0f0f0f0f0f0f0fL);
        n = (n & 0x00ff00ff00ff00ffL) + ((n >> 8) & 0x00ff00ff00ff00ffL);
        n = (n & 0x0000ffff0000ffffL) + ((n >> 16) & 0x0000ffff0000ffffL);
        return (byte)((n & 0x00000000ffffffffL) + ((n >> 32) & 0x00000000ffffffffL) + msb);
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>PopCount(ULong)</Title>
      <Shortcut>popcountul</Shortcut>
      <Description>符号なしlongのbitが立っている数</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Runtime.CompilerServices</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static byte PopCount(ulong n)
{
    unchecked
    {
        n = (n & 0x5555555555555555UL) + ((n >> 1) & 0x5555555555555555UL);
        n = (n & 0x3333333333333333UL) + ((n >> 2) & 0x3333333333333333UL);
        n = (n & 0x0f0f0f0f0f0f0f0fUL) + ((n >> 4) & 0x0f0f0f0f0f0f0f0fUL);
        n = (n & 0x00ff00ff00ff00ffUL) + ((n >> 8) & 0x00ff00ff00ff00ffUL);
        n = (n & 0x0000ffff0000ffffUL) + ((n >> 16) & 0x0000ffff0000ffffUL);
        return (byte)((n & 0x00000000ffffffffUL) + ((n >> 32) & 0x00000000ffffffffUL));
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>PopCount(Int)</Title>
      <Shortcut>popcounti</Shortcut>
      <Description>符号つきintのbitが立っている数</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Runtime.CompilerServices</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static byte PopCount(int n)
{
    unchecked
    {
        int msb = 0;
        if (n < 0)
        {
            n = -(n + 1);
            msb = 1;
        }
        n = (n & 0x55555555) + ((n >> 1) & 0x55555555);
        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
        n = (n & 0x0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f);
        n = (n & 0x00ff00ff) + ((n >> 8) & 0x00ff00ff);
        return (byte)((n & 0x0000ffff) + ((n >> 16) & 0x0000ffff) + msb);
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>PopCount(UInt)</Title>
      <Shortcut>popcountui</Shortcut>
      <Description>符号なしintのbitが立っている数</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Runtime.CompilerServices</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static byte PopCount(uint n)
{
    unchecked
    {
        n = (n & 0x55555555u) + ((n >> 1) & 0x55555555u);
        n = (n & 0x33333333u) + ((n >> 2) & 0x33333333u);
        n = (n & 0x0f0f0f0fu) + ((n >> 4) & 0x0f0f0f0fu);
        n = (n & 0x00ff00ffu) + ((n >> 8) & 0x00ff00ffu);
        return (byte)((n & 0x0000ffffu) + ((n >> 16) & 0x0000ffffu));
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
