<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ReRooting</Title>
      <Shortcut>rerooting</Shortcut>
      <Description>†全方位木DP†</Description>
      <Author>keymoon</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Type</ID>
          <ToolTip>木DPで扱う型</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>IdentityElement</ID>
          <ToolTip>木DPで扱う型</ToolTip>
          <Default>IdentityElement</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[class ReRooting
{
    int[][] Neighbours;
    int[][] IndexForNeighbours;

    $Type$[] res;
    $Type$[][] dp;
    int[] SearchState;

    public ReRooting(int nodeCount, int[][] edges)
    {
        List<int>[] neighbours = new List<int>[nodeCount];
        List<int>[] indexForNeighbours = new List<int>[nodeCount];

        for (int i = 0; i < nodeCount; i++)
        {
            neighbours[i] = new List<int>();
            indexForNeighbours[i] = new List<int>();
        }
        for (int i = 0; i < edges.Length; i++)
        {
            var edge = edges[i];
            indexForNeighbours[edge[0]].Add(neighbours[edge[1]].Count);
            indexForNeighbours[edge[1]].Add(neighbours[edge[0]].Count);
            neighbours[edge[0]].Add(edge[1]);
            neighbours[edge[1]].Add(edge[0]);
        }

        Neighbours = new int[nodeCount][];
        IndexForNeighbours = new int[nodeCount][];
        for (int i = 0; i < nodeCount; i++)
        {
            Neighbours[i] = neighbours[i].ToArray();
            IndexForNeighbours[i] = indexForNeighbours[i].ToArray();
        }

        dp = new $Type$[Neighbours.Length][];
        SearchState = new int[Neighbours.Length];

        res = new $Type$[Neighbours.Length];
        for (int i = 0; i < Neighbours.Length; i++)
        {
            dp[i] = new $Type$[Neighbours[i].Length];
            SearchState[i] = -2;
        }
    }

    public $Type$ Query(int x)
    {
        if (SearchState[x] != -1) DFS(x, -1);
        return res[x];
    }

    public $Type$ Query(int x, int toIndex)
    {
        if (SearchState[x] != -1 && SearchState[x] != toIndex) DFS(x, Neighbours[x][toIndex]);
        return dp[Neighbours[x][toIndex]][IndexForNeighbours[x][toIndex]];
    }

    private void DFS(int x, int parent)
    {
        Debug.Assert(SearchState[x] != -1 && (SearchState[x] == -2 || Neighbours[x][SearchState[x]] != parent));

        $Type$ accum = $IdentityElement$;
        if (SearchState[x] == -2)
        {
            SearchState[x] = -1;
            for (int i = 0; i < Neighbours[x].Length; i++)
            {
                if (Neighbours[x][i] == parent)
                {
                    SearchState[x] = i;
                    continue;
                }
                var state = SearchState[Neighbours[x][i]];
                if (state != -1 && state != IndexForNeighbours[x][i]) DFS(Neighbours[x][i], x);
                accum = /*Operate(accum, dp[x][i])*/;
            }
            if (SearchState[x] != -1)
            {
                dp[parent][IndexForNeighbours[x][SearchState[x]]] = /*Operate(accum, node)*/;
                return;
            }
            accum = $IdentityElement$;
        }
        else
        {
            var targetInd = SearchState[x];
            var target = Neighbours[x][targetInd];
            var targetState = SearchState[target];
            if (targetState != -1 && targetState != IndexForNeighbours[x][targetInd]) DFS(Neighbours[x][targetInd], x);
        }

        $Type$[] accumsFromTail = new $Type$[Neighbours[x].Length];
        accumsFromTail[accumsFromTail.Length - 1] = $IdentityElement$;
        for (int i = accumsFromTail.Length - 2; i >= 0; i--) accumsFromTail[i] = /*Operate(accumsFromTail[i + 1], dp[x][i + 1]*/;
        for (int i = 0; i < accumsFromTail.Length; i++)
        {
            dp[Neighbours[x][i]][IndexForNeighbours[x][i]] = /*Operate(accum, accumsFromTail[i], node)*/;
            accum = /*Operate(accum, dp[x][i])*/;
        }

        res[x] = accum;
        SearchState[x] = -1;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
